pipeline {
    agent any

    environment {
        DIRECTORY_PATH = '/path/to/code' // Ensure this path is valid or set accordingly
    }

    stages {
        stage('Build') {
            steps {
                echo "Fetching the source code from ${env.DIRECTORY_PATH}"
                echo "Compiling the code and generating necessary artifacts"
                echo "Using Maven for automation"
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                echo "Running Unit tests"
                echo "Running Integration tests"
                echo "Using JUnit for Unit Tests and Postman for Integration Tests"
            }
            post {
                success {
                    emailext(
                        body: """Unit and Integration Tests have passed successfully.
                                 Attached are the test logs.
                                 Please review the build details at ${env.BUILD_URL}""",
                        to: 'yashicabassi@gmail.com',
                        subject: "Unit and Integration Tests Successful",
                        attachmentsPattern: 'test.log',
                        attachLog: true,
                        from: "jenkins@example.com" // Specify sender email
                    )
                }
                failure {
                    emailext(
                        body: """Unit and Integration Tests have failed.
                                 Attached are the test logs.
                                 Please review the build details at ${env.BUILD_URL}""",
                        to: 'yashicabassi@gmail.com',
                        subject: "Unit and Integration Tests Failed",
                        attachmentsPattern: 'test.log',
                        attachLog: true,
                        from: "jenkins@example.com" // Specify sender email
                    )
                }
            }
        }

        stage('Code Analysis') {
            steps {
                echo "Performing Code Analysis"
                echo "Using SonarQube Scanner for Jenkins plugin"
            }
        }

        stage('Security Scan') {
            steps {
                echo "Performing security scan to find vulnerabilities"
                echo "Using OWASP Dependency-Check plugin"
            }
            post {
                success {
                    emailext(
                        body: """Security Scan has completed successfully.
                                 Attached are the scan logs.
                                 Please review the build details at ${env.BUILD_URL}""",
                        to: 'yashicabassi@gmail.com',
                        subject: "Security Scan Successful",
                        attachmentsPattern: 'scan.log',
                        attachLog: true,
                        from: "jenkins@example.com" // Specify sender email
                    )
                }
                failure {
                    emailext(
                        body: """Security Scan has failed.
                                 Attached are the scan logs.
                                 Please review the build details at ${env.BUILD_URL}""",
                        to: 'yashicabassi@gmail.com',
                        subject: "Security Scan Failed",
                        attachmentsPattern: 'scan.log',
                        attachLog: true,
                        from: "jenkins@example.com" // Specify sender email
                    )
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo "Deploying application to the staging server"
                echo "Using AWS or other deployment tool"
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo "Running integration tests on the staging environment"
                echo "Using JUnit or other test frameworks"
            }
        }

        stage('Deploy to Production') {
            steps {
                echo "Deploying application to the production server"
                echo "Using AWS or other deployment tool"
            }
        }
    }

    post {
        always {
            echo "Pipeline finished"
            // You can add any additional cleanup or notifications here if needed
        }
    }
}
